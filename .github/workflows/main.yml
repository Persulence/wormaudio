name: Build Editor + Godot

on:
  push:
    paths-ignore:
      - '.gitignore'
      - '*.md'

jobs:
#  lint:
#    name: 🧹 Lint / 📜 C++
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3

  build:
    strategy:
      fail-fast: false
      matrix:
#        build_type: ['Debug', 'Release']
        build_type: ['Release']
        config:
          - { name: '🐧 Linux GCC', id: 'linux', os: ubuntu-latest }
          - { name: '🪟 Windows MSVC', id: 'windows', os: windows-latest }
#          - { name: '🍏 macOS Clang', id: 'macos', os: macos-latest }

    name: 🛠 Build / ${{ matrix.config.name }} (${{ matrix.build_type }})
    runs-on: ${{ matrix.config.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

#      - name: Add SSH key
#        uses: webfactory/ssh-agent@v0.9.0
#        with:
#          ssh-private-key: |
#            ${{ secrets.SSH_PRIVATE_KEY }}
#            ${{ secrets.WA_JAVA_KEY }}

      - name: Install Dependencies (macOS)
        if: matrix.config.os == 'macos-latest'
        run: brew install ninja swig ccache

      - name: Install Dependencies (Linux)
        if: matrix.config.os == 'ubuntu-latest'
        # Disable man-db things (From https://github.com/actions/runner-images/issues/10977
        run: >
          sudo tee /etc/dpkg/dpkg.cfg.d/01_nodoc > /dev/null << 'EOF'
          
          path-exclude /usr/share/doc/*
          
          path-exclude /usr/share/man/*
          
          path-exclude /usr/share/info/*
          
          EOF
          
          sudo apt-get update
          
          sudo apt-get install -y 
          ninja-build swig ccache
          alsa libasound2-dev
          xorg libx11-dev x11-xserver-utils libxrandr-dev libxinerama-dev libxcursor-dev libxcomposite-dev libxext-dev libxrender-dev 
          libglu1-mesa-dev mesa-common-dev
          libfreetype-dev libfreetype6 libfreetype6-dev libfontconfig1-dev

      - name: Install Dependencies (Windows)
        if: matrix.config.os == 'windows-latest'
        run: |
          choco upgrade ninja swig ccache
          
#      - name: Install compiler
#        id: install_cc
#        uses: rlalik/setup-cpp-compiler@master
#        with:
#          compiler: gcc-15

      - name: Setup MSVC (Windows)
        if: matrix.config.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: CCache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: '10G'
          key: ${{ matrix.config.os }}-${{ matrix.build_type }}

        # Suppress warnings as Cereal produces thousands of lines of template warnings
      - name: Set variables (Windows)
        if: matrix.config.os == 'windows-latest'
        # /w doesn't seem to work
        run: echo "CXX_FLAGS=/w /W0" >> $GITHUB_ENV

      - name: Set variables (Linux)
        if: matrix.config.os == 'ubuntu-latest'
        # -fexceptions is necessary as cereal uses exceptions but godot doesn't like them
        # I'll find a way to get rid of it eventually
        run: echo "CXX_FLAGS="-fexceptions -std=c++20 -w"" >> $GITHUB_ENV

      - name: Configure
        run: >
          mkdir build-editor

          cmake
          -B build-editor
          -G "Ninja"
          -DJUCE_MODULES_ONLY=ON 
          -DDISABLE_WARNINGS=TRUE
          -DWORMAUDIO_SKIP_CCACHE=TRUE
          -DCMAKE_CXX_FLAGS="${{ env.CXX_FLAGS }}"
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_C_COMPILER_LAUNCHER=ccache 
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          --install-prefix ${{ github.workspace }}/install-${{ matrix.build_type }}
          .
      #          -DCMAKE_CXX_FLAGS="${{ env.CXX_FLAGS }}"
#          -DCMAKE_CXX_COMPILER=${{ steps.install_cc.outputs.cxx }}
#          -DCMAKE_C_COMPILER=${{ steps.install_cc.outputs.cc }}

      - name: Build Editor
        run: cmake --build build-editor --target build_editor

      - name: Build Godot Integration
        run: cmake --build build-editor --target build_godot

      - name: Install
        run: cmake --install build-editor

      - name: Upload artifact (Debug)
        if: matrix.build_type == 'Debug'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ matrix.config.id }}-Debug
          path: |
            ${{ github.workspace }}/install-${{ matrix.build_type }}/*

      - name: Upload artifact (Release)
        if: matrix.build_type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ matrix.config.id }}-Release
          path: |
            ${{ github.workspace }}/install-${{ matrix.build_type }}/*

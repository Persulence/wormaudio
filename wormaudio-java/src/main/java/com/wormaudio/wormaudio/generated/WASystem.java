/*
 * Copyright (c)  2025 Persulence
 *
 * This file is part of the WormAudio project.
 *
 * WormAudio is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * WormAudio is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Foobar. If not, see https://www.gnu.org/licenses/.
 *
 */

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.wormaudio.wormaudio.generated;

public class WASystem {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected WASystem(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(WASystem obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(WASystem obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings({"deprecation", "removal"})
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        WormAudioInternalJNI.delete_WASystem(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static WASystem load(String path) throws java.io.IOException {
    return new WASystem(WormAudioInternalJNI.WASystem_load(path), true);
  }

  public WASoundDef getEventDef(String name) {
        var cPtr = WormAudioInternalJNI.WASystem_getEventDef(swigCPtr, this, name);
        if (cPtr == 0)
            return null;

        // This will fail for some types, such as std::string
        // There is no way to recursively include
        // std::string refers to WormAudioInternalJNI.WASystem_getEventDef(swigCPtr, this, name), which generates the top level JNI call, rather than the one that creates a String.
        // Assuming the object is owning. $owned is always false, even when it shouldn't be.
        return new WASoundDef(cPtr, true);
    }

}

/*
 * Copyright (c)  2025 Persulence
 *
 * This file is part of the WormAudio project.
 *
 * WormAudio is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * WormAudio is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Foobar. If not, see https://www.gnu.org/licenses/.
 *
 */

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.wormaudio.wormaudio.generated;

public class WormAudioInternalJNI {
  public final static native long new_TransportControl();
  public final static native void TransportControl_setState(long jarg1, TransportControl jarg1_, int jarg2);
  public final static native int TransportControl_getState(long jarg1, TransportControl jarg1_);
  public final static native boolean TransportControl_stopped(long jarg1, TransportControl jarg1_);
  public final static native void delete_TransportControl(long jarg1);
  public final static native long new_MessageThreadManager();
  public final static native void delete_MessageThreadManager(long jarg1);
  public final static native void MessageThreadManager_claimMessageThread();
  public final static native void MessageThreadManager_requestMessageThreadStop();
  public final static native long new_WARuntime();
  public final static native void delete_WARuntime(long jarg1);
  public final static native long WARuntime_instantiate(long jarg1, WARuntime jarg1_, long jarg2, WASoundDef jarg2_);
  public final static native void WARuntime_connectToDevice(long jarg1, WARuntime jarg1_);
  public final static native void WARuntime_disconnect(long jarg1, WARuntime jarg1_);
  public final static native void WARuntime_setListenerPosition(long jarg1, WARuntime jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void WARuntime_setListenerYaw(long jarg1, WARuntime jarg1_, float jarg2);
  public final static native void WARuntime_clearInstances(long jarg1, WARuntime jarg1_);
  public final static native int WARuntime_getInstanceCount(long jarg1, WARuntime jarg1_);
  public final static native void WARuntime_setState(long jarg1, WARuntime jarg1_, int jarg2);
  public final static native long WASoundInstance_transport_get(long jarg1, WASoundInstance jarg1_);
  public final static native boolean WASoundInstance_canFree(long jarg1, WASoundInstance jarg1_);
  public final static native void WASoundInstance_markDone(long jarg1, WASoundInstance jarg1_);
  public final static native void delete_WASoundInstance(long jarg1);
  public final static native void setInstancePos(long jarg1, WASoundInstance jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native long new_LoggerAdaptor();
  public final static native void delete_LoggerAdaptor(long jarg1);
  public final static native void LoggerAdaptor_logMessage(long jarg1, LoggerAdaptor jarg1_, String jarg2);
  public final static native void LoggerAdaptor_director_connect(LoggerAdaptor obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void LoggerAdaptor_change_ownership(LoggerAdaptor obj, long cptr, boolean take_or_release);
  public final static native void setLogger(long jarg1, LoggerAdaptor jarg1_);
  public final static native void sanityCheck();
  public final static native void delete_WASoundDef(long jarg1);
  public final static native long WASystem_load(String jarg1) throws java.io.IOException;
  public final static native long WASystem_getEventDef(long jarg1, WASystem jarg1_, String jarg2);
  public final static native void delete_WASystem(long jarg1);

  public static void SwigDirector_LoggerAdaptor_logMessage(LoggerAdaptor jself, String message) {
    jself.logMessage(message);
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
